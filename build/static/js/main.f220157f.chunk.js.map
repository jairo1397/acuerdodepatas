{"version":3,"sources":["components/PDF.js","components/Post.js","App.js","serviceWorker.js","index.js"],"names":["ref","React","createRef","PDF","props","className","title","content","src","image","alt","targetRef","filename","toPdf","onClick","Post","state","postSubmitted","onChange","input","e","setState","target","value","sunmitPost","alert","preventDefault","this","method","name","type","placeholder","editor","ClassicEditor","data","onReady","console","log","event","getData","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4SAGMA,EAAMC,IAAMC,YAkBHC,EAhBH,SAACC,GACX,OACE,oCACE,yBAAKC,UAAU,OAAOL,IAAKA,GACzB,4BAAKI,EAAME,OAEX,2BAAIF,EAAMG,SACV,yBAAKC,IAAKJ,EAAMK,MAAOC,IAAKN,EAAMK,SAEpC,kBAAC,IAAD,CAAKE,UAAWX,EAAKY,SAAS,aAC3B,gBAAGC,EAAH,EAAGA,MAAH,OAAe,4BAAQC,QAASD,GAAjB,2B,yBCoFTE,E,4MA5FXC,MAAQ,CACJV,MAAO,GACPC,QAAS,GACTE,MAAO,GACPQ,eAAe,G,EAInBC,SAAW,SAAAC,GAAK,OAAI,SAAAC,GAChB,EAAKC,SAAL,eACKF,EAAQC,EAAEE,OAAOC,U,EAI1BC,WAAa,SAACJ,GAEL,EAAKJ,MAAMV,OAAU,EAAKU,MAAMT,QAIjC,EAAKc,SAAS,CACVJ,eAAe,KAJnBQ,MAAM,4BACNL,EAAEM,mB,uDAQA,IAAD,OAEL,OACI,oCACMC,KAAKX,MAAMC,cAsDL,kBAAC,EAAD,CAAKX,MAAOqB,KAAKX,MAAMV,MAAOC,QAASoB,KAAKX,MAAMT,QAASE,MAAOkB,KAAKX,MAAMP,QArDhF,yBAAKJ,UAAU,aACZ,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,gBACX,0BAAMA,UAAU,kBAAkBuB,OAAO,QACrC,kCACI,4BAAQvB,UAAU,sBAAlB,gBACA,yBAAKA,UAAU,cACX,0BAAMA,UAAU,wCAAuC,uBAAGA,UAAU,wBACpE,2BAAOa,SAAUS,KAAKT,SAAS,SAAUW,KAAK,QAAQC,KAAK,OAAOC,YAAY,aAAa1B,UAAU,kBAEzG,yBAAKA,UAAU,cACX,0BAAMA,UAAU,wCAAuC,uBAAGA,UAAU,wBAEpE,4BAAQa,SAAUS,KAAKT,SAAS,SAAUW,KAAK,QAAQE,YAAY,wBAAwB1B,UAAU,gBACjG,iEACA,4BAAQkB,MAAM,mCAAd,SACA,4BAAQA,MAAM,mCAAd,QACA,4BAAQA,MAAM,mCAAd,YAKR,yBAAKlB,UAAU,cACX,0BAAMA,UAAU,wCAAuC,uBAAGA,UAAU,mCAEpE,kBAAC,WAAD,CAEIA,UAAU,eAAewB,KAAK,UAC9BG,OAAQC,IACRC,KAAK,gCACLC,QAAS,SAAAH,GAELI,QAAQC,IAAI,0BAA2BL,IAE3Cd,SAAU,SAACoB,EAAON,GACd,IAAME,EAAOF,EAAOO,UACpBH,QAAQC,IAAI,CAAEC,QAAON,SAAQE,SAC7B,EAAKb,SAAS,CAAEd,QAAS2B,QAIrC,yBAAK7B,UAAU,cACX,4BAAQyB,KAAK,SAAShB,QAASa,KAAKH,WAAYnB,UAAU,0BAA1D,uB,GA7EjCmC,a,MCOJC,MARf,WACE,OACE,yBAAKpC,UAAU,OACb,kBAAC,EAAD,QCKcqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.f220157f.chunk.js","sourcesContent":["import React from 'react';\r\nimport Pdf from \"react-to-pdf\";\r\n\r\nconst ref = React.createRef();\r\n\r\nconst PDF = (props) => {\r\n  return (\r\n    <>\r\n      <div className=\"Post\" ref={ref}>\r\n        <h1>{props.title}</h1>\r\n\r\n        <p>{props.content}</p>\r\n        <img src={props.image} alt={props.image} />\r\n      </div>\r\n      <Pdf targetRef={ref} filename=\"post.pdf\">\r\n        {({ toPdf }) => <button onClick={toPdf}>Descargar como PDF</button>}\r\n      </Pdf>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default PDF;","import React, { Component } from 'react';\r\nimport PDF from './PDF';\r\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\n\r\nclass Post extends Component {\r\n\r\n    state = {\r\n        title: '',\r\n        content: '',\r\n        image: '',\r\n        postSubmitted: false\r\n    }\r\n\r\n\r\n    onChange = input => e => {\r\n        this.setState({\r\n            [input]: e.target.value\r\n        });\r\n    }\r\n\r\n    sunmitPost = (e) => {\r\n\r\n        if (!this.state.title || !this.state.content) {\r\n            alert('All fields are required!');\r\n            e.preventDefault();\r\n        } else {\r\n            this.setState({\r\n                postSubmitted: true\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                {!this.state.postSubmitted ?\r\n                    (<div className=\"container\">\r\n                        <div className=\"jumbotron mt-3\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-12\">\r\n                                    <div className=\"well well-sm\">\r\n                                        <form className=\"form-horizontal\" method=\"post\">\r\n                                            <fieldset>\r\n                                                <legend className=\"text-center header\">Add new Post</legend>\r\n                                                <div className=\"form-group\">\r\n                                                    <span className=\"col-md-1 col-md-offset-2 text-center\"><i className=\"fa fa-user bigicon\"></i></span>\r\n                                                    <input onChange={this.onChange('title')} name=\"title\" type=\"text\" placeholder=\"Post Title\" className=\"form-control\" />\r\n                                                </div>\r\n                                                <div className=\"form-group\">\r\n                                                    <span className=\"col-md-1 col-md-offset-2 text-center\"><i className=\"fa fa-user bigicon\"></i></span>\r\n\r\n                                                    <select onChange={this.onChange('image')} name=\"image\" placeholder=\"Seleccione una imagen\" className=\"form-control\" >\r\n                                                        <option>--Seleccione una opcion--    </option>\r\n                                                        <option value=\"https://i.imgur.com/iiDHoGV.jpg\">Perro</option>\r\n                                                        <option value=\"https://i.imgur.com/x2V772l.jpg\">Gato</option>\r\n                                                        <option value=\"https://i.imgur.com/f1mh74Z.png\">Conejo</option>\r\n\r\n                                                    </select>\r\n\r\n                                                </div>\r\n                                                <div className=\"form-group\">\r\n                                                    <span className=\"col-md-1 col-md-offset-2 text-center\"><i className=\"fa fa-pencil-square-o bigicon\"></i></span>\r\n\r\n                                                    <CKEditor\r\n                                                        // onChange={this.onChange('content')} \r\n                                                        className=\"form-control\" name=\"content\"\r\n                                                        editor={ClassicEditor}\r\n                                                        data=\"<p>Hello from CKEditor 5!</p>\"\r\n                                                        onReady={editor => {\r\n                                                            // You can store the \"editor\" and use when it is needed.\r\n                                                            console.log('Editor is ready to use!', editor);\r\n                                                        }}\r\n                                                        onChange={(event, editor) => {\r\n                                                            const data = editor.getData();\r\n                                                            console.log({ event, editor, data });\r\n                                                            this.setState({ content: data });\r\n                                                        }}\r\n                                                    />\r\n                                                </div>\r\n                                                <div className=\"form-group\">\r\n                                                    <button type=\"button\" onClick={this.sunmitPost} className=\"btn btn-primary btn-lg\">Enviar</button>\r\n                                                </div>\r\n                                            </fieldset>\r\n                                        </form>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>) : (\r\n                        <PDF title={this.state.title} content={this.state.content} image={this.state.image} />\r\n                    )\r\n                }\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport Post from './components/Post';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Post />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}